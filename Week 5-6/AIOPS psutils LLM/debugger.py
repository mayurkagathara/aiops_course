import os
import json
import argparse
import logging
from datetime import datetime
from system_info import collect_system_data
from llm_interface import query_llm

# Setup logging
log_dir = os.path.join(os.path.expanduser("~"), ".sys_debugger_logs")
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, f"debugger_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
logging.basicConfig(filename=log_file, level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

def generate_report(data: dict, output_file: str = None) -> str:
    """
    Generate a human-readable system debug report using LLM.

    Args:
        data (dict): System snapshot collected via psutil.
        output_file (str, optional): Path to save the output report.

    Returns:
        str: Human-readable report from LLM.
    """
    prompt = f"""
Analyze the following system snapshot and report any potential issues like slowdown, memory pressure, IO bottlenecks, or CPU spikes.
Respond clearly and concisely in bullet points:

{json.dumps(data, indent=2)}
"""
    prompt = f"""
Analyze the following system snapshot generated by psutil python. Use only this data and find out top 1-2 critical problems where we see abnormal observation in values. Do not answer outside this data.

{json.dumps(data)}
"""
    try:
        logging.info("Sending data to LLM for analysis...")
        report = query_llm(prompt)
        logging.info("Report generated successfully.")
        if output_file:
            with open(output_file, "w", encoding="utf-8") as f:
                f.write(report)
            logging.info(f"Report saved to {output_file}")
        return report
    except Exception as e:
        logging.error(f"Failed to generate report: {str(e)}")
        return f"Error: {str(e)}"

def main():
    parser = argparse.ArgumentParser(description="Cross-platform System Debugger")
    parser.add_argument("--json", help="Save raw system data to a JSON file", type=str)
    parser.add_argument("--report", help="Save LLM-generated report to a text file", type=str)
    args = parser.parse_args()

    print("[*] Collecting system information...")
    data = collect_system_data()
    if args.json:
        try:
            with open(args.json, "w", encoding="utf-8") as jf:
                json.dump(data, jf, indent=2)
            logging.info(f"System info saved to {args.json}")
        except Exception as e:
            logging.error(f"Error saving JSON: {str(e)}")

    print("[*] Generating system debug report...")
    report = generate_report(data, args.report)
    print("=== System Debug Report ===\n")
    print(report)

if __name__ == "__main__":
    main()
