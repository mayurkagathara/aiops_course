# CrewAI Agents (Planning, Execution, Analysis)
from crewai import Agent, LLM
from langchain_openai import ChatOpenAI
from tools import PrometheusQueryTool, FileStorageTool
from config import OPENROUTER_API_KEY, OPENROUTER_MODEL, AGENT_VERBOSE, MAX_AGENT_ITERATIONS

USE_LOCAL_LLM = True

# Initialize the LLM
if USE_LOCAL_LLM:
    llm = LLM(
        model="ollama/qwen2.5:1.5b",
        base_url="http://localhost:11434"
    )
else:
    llm = ChatOpenAI(
        model=OPENROUTER_MODEL,
        openai_api_key=OPENROUTER_API_KEY,
        openai_api_base="https://openrouter.ai/api/v1"
    )

PlanningAgent = Agent(
    verbose = AGENT_VERBOSE,
    role="planner",
    goal="Convert natural language query from user into detailed PromQL",
    llm=llm,
    backstory="The PlanningAgent is designed to bridge the gap "
    "between human intent and machine execution. "
    "It interprets user queries, identifies the underlying requirements, "
    "and formulates a precise PromQL query. ",
    max_iter= MAX_AGENT_ITERATIONS
)

ExecutorAgent = Agent(
    verbose = AGENT_VERBOSE,
    role="executor",
    goal="Execute PromQL queries against Prometheus using Tool",
    llm=llm,
    tools=[PrometheusQueryTool()],
    backstory="The ExecutorAgent acts as the operational backbone of the system. "
     "It executed PormQL query generated by the PlanningAgent, ",
    max_iter= MAX_AGENT_ITERATIONS
)

AnalyzerAgent = Agent(
    verbose = AGENT_VERBOSE,
    role="analyzer",
    goal="Analyze Prometheus query results, extract meaningful insights, "
    "and provide actionable recommendations based on the data.",
    llm=llm,
    # tools=[FileStorageTool()],
    backstory="The AnalyzerAgent is the system's intelligence layer. "
    "It processes the raw results from Prometheus, identifies patterns, "
    "and generates insights that are both actionable and easy to understand. "
    "This agent ensures that users can make informed decisions based on the data.",
    max_iter= MAX_AGENT_ITERATIONS
)